/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package tech.nermindedovic.papitutorial.models.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class TurbineState extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4318946377461053649L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TurbineState\",\"namespace\":\"tech.nermindedovic.papitutorial.models.avro\",\"fields\":[{\"name\":\"timestamp\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"windSpeedMph\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"power\",\"type\":{\"type\":\"enum\",\"name\":\"Power\",\"symbols\":[\"ON\",\"OFF\"]}},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"Type\",\"symbols\":[\"DESIRED\",\"REPORTED\"]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<TurbineState> ENCODER =
      new BinaryMessageEncoder<TurbineState>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TurbineState> DECODER =
      new BinaryMessageDecoder<TurbineState>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<TurbineState> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<TurbineState> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<TurbineState> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TurbineState>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this TurbineState to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a TurbineState from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a TurbineState instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static TurbineState fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.time.Instant timestamp;
  private java.lang.Double windSpeedMph;
  private tech.nermindedovic.papitutorial.models.avro.Power power;
  private tech.nermindedovic.papitutorial.models.avro.Type type;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TurbineState() {}

  /**
   * All-args constructor.
   * @param timestamp The new value for timestamp
   * @param windSpeedMph The new value for windSpeedMph
   * @param power The new value for power
   * @param type The new value for type
   */
  public TurbineState(java.time.Instant timestamp, java.lang.Double windSpeedMph, tech.nermindedovic.papitutorial.models.avro.Power power, tech.nermindedovic.papitutorial.models.avro.Type type) {
    this.timestamp = timestamp.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.windSpeedMph = windSpeedMph;
    this.power = power;
    this.type = type;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return timestamp;
    case 1: return windSpeedMph;
    case 2: return power;
    case 3: return type;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null,
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: timestamp = (java.time.Instant)value$; break;
    case 1: windSpeedMph = (java.lang.Double)value$; break;
    case 2: power = (tech.nermindedovic.papitutorial.models.avro.Power)value$; break;
    case 3: type = (tech.nermindedovic.papitutorial.models.avro.Type)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.time.Instant getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.time.Instant value) {
    this.timestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'windSpeedMph' field.
   * @return The value of the 'windSpeedMph' field.
   */
  public java.lang.Double getWindSpeedMph() {
    return windSpeedMph;
  }


  /**
   * Sets the value of the 'windSpeedMph' field.
   * @param value the value to set.
   */
  public void setWindSpeedMph(java.lang.Double value) {
    this.windSpeedMph = value;
  }

  /**
   * Gets the value of the 'power' field.
   * @return The value of the 'power' field.
   */
  public tech.nermindedovic.papitutorial.models.avro.Power getPower() {
    return power;
  }


  /**
   * Sets the value of the 'power' field.
   * @param value the value to set.
   */
  public void setPower(tech.nermindedovic.papitutorial.models.avro.Power value) {
    this.power = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public tech.nermindedovic.papitutorial.models.avro.Type getType() {
    return type;
  }


  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(tech.nermindedovic.papitutorial.models.avro.Type value) {
    this.type = value;
  }

  /**
   * Creates a new TurbineState RecordBuilder.
   * @return A new TurbineState RecordBuilder
   */
  public static tech.nermindedovic.papitutorial.models.avro.TurbineState.Builder newBuilder() {
    return new tech.nermindedovic.papitutorial.models.avro.TurbineState.Builder();
  }

  /**
   * Creates a new TurbineState RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TurbineState RecordBuilder
   */
  public static tech.nermindedovic.papitutorial.models.avro.TurbineState.Builder newBuilder(tech.nermindedovic.papitutorial.models.avro.TurbineState.Builder other) {
    if (other == null) {
      return new tech.nermindedovic.papitutorial.models.avro.TurbineState.Builder();
    } else {
      return new tech.nermindedovic.papitutorial.models.avro.TurbineState.Builder(other);
    }
  }

  /**
   * Creates a new TurbineState RecordBuilder by copying an existing TurbineState instance.
   * @param other The existing instance to copy.
   * @return A new TurbineState RecordBuilder
   */
  public static tech.nermindedovic.papitutorial.models.avro.TurbineState.Builder newBuilder(tech.nermindedovic.papitutorial.models.avro.TurbineState other) {
    if (other == null) {
      return new tech.nermindedovic.papitutorial.models.avro.TurbineState.Builder();
    } else {
      return new tech.nermindedovic.papitutorial.models.avro.TurbineState.Builder(other);
    }
  }

  /**
   * RecordBuilder for TurbineState instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TurbineState>
    implements org.apache.avro.data.RecordBuilder<TurbineState> {

    private java.time.Instant timestamp;
    private java.lang.Double windSpeedMph;
    private tech.nermindedovic.papitutorial.models.avro.Power power;
    private tech.nermindedovic.papitutorial.models.avro.Type type;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(tech.nermindedovic.papitutorial.models.avro.TurbineState.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.windSpeedMph)) {
        this.windSpeedMph = data().deepCopy(fields()[1].schema(), other.windSpeedMph);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.power)) {
        this.power = data().deepCopy(fields()[2].schema(), other.power);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.type)) {
        this.type = data().deepCopy(fields()[3].schema(), other.type);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing TurbineState instance
     * @param other The existing instance to copy.
     */
    private Builder(tech.nermindedovic.papitutorial.models.avro.TurbineState other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.windSpeedMph)) {
        this.windSpeedMph = data().deepCopy(fields()[1].schema(), other.windSpeedMph);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.power)) {
        this.power = data().deepCopy(fields()[2].schema(), other.power);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.type)) {
        this.type = data().deepCopy(fields()[3].schema(), other.type);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public java.time.Instant getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public tech.nermindedovic.papitutorial.models.avro.TurbineState.Builder setTimestamp(java.time.Instant value) {
      validate(fields()[0], value);
      this.timestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public tech.nermindedovic.papitutorial.models.avro.TurbineState.Builder clearTimestamp() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'windSpeedMph' field.
      * @return The value.
      */
    public java.lang.Double getWindSpeedMph() {
      return windSpeedMph;
    }


    /**
      * Sets the value of the 'windSpeedMph' field.
      * @param value The value of 'windSpeedMph'.
      * @return This builder.
      */
    public tech.nermindedovic.papitutorial.models.avro.TurbineState.Builder setWindSpeedMph(java.lang.Double value) {
      validate(fields()[1], value);
      this.windSpeedMph = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'windSpeedMph' field has been set.
      * @return True if the 'windSpeedMph' field has been set, false otherwise.
      */
    public boolean hasWindSpeedMph() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'windSpeedMph' field.
      * @return This builder.
      */
    public tech.nermindedovic.papitutorial.models.avro.TurbineState.Builder clearWindSpeedMph() {
      windSpeedMph = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'power' field.
      * @return The value.
      */
    public tech.nermindedovic.papitutorial.models.avro.Power getPower() {
      return power;
    }


    /**
      * Sets the value of the 'power' field.
      * @param value The value of 'power'.
      * @return This builder.
      */
    public tech.nermindedovic.papitutorial.models.avro.TurbineState.Builder setPower(tech.nermindedovic.papitutorial.models.avro.Power value) {
      validate(fields()[2], value);
      this.power = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'power' field has been set.
      * @return True if the 'power' field has been set, false otherwise.
      */
    public boolean hasPower() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'power' field.
      * @return This builder.
      */
    public tech.nermindedovic.papitutorial.models.avro.TurbineState.Builder clearPower() {
      power = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public tech.nermindedovic.papitutorial.models.avro.Type getType() {
      return type;
    }


    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public tech.nermindedovic.papitutorial.models.avro.TurbineState.Builder setType(tech.nermindedovic.papitutorial.models.avro.Type value) {
      validate(fields()[3], value);
      this.type = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public tech.nermindedovic.papitutorial.models.avro.TurbineState.Builder clearType() {
      type = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TurbineState build() {
      try {
        TurbineState record = new TurbineState();
        record.timestamp = fieldSetFlags()[0] ? this.timestamp : (java.time.Instant) defaultValue(fields()[0]);
        record.windSpeedMph = fieldSetFlags()[1] ? this.windSpeedMph : (java.lang.Double) defaultValue(fields()[1]);
        record.power = fieldSetFlags()[2] ? this.power : (tech.nermindedovic.papitutorial.models.avro.Power) defaultValue(fields()[2]);
        record.type = fieldSetFlags()[3] ? this.type : (tech.nermindedovic.papitutorial.models.avro.Type) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TurbineState>
    WRITER$ = (org.apache.avro.io.DatumWriter<TurbineState>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TurbineState>
    READER$ = (org.apache.avro.io.DatumReader<TurbineState>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










