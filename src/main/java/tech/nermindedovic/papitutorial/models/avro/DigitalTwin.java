/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package tech.nermindedovic.papitutorial.models.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class DigitalTwin extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3082565855438827523L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DigitalTwin\",\"namespace\":\"tech.nermindedovic.papitutorial.models.avro\",\"fields\":[{\"name\":\"reported\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"TurbineState\",\"fields\":[{\"name\":\"timestamp\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"windSpeedMph\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"power\",\"type\":{\"type\":\"enum\",\"name\":\"Power\",\"symbols\":[\"ON\",\"OFF\"]}},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"Type\",\"symbols\":[\"DESIRED\",\"REPORTED\"]}}]}}},{\"name\":\"desired\",\"type\":{\"type\":\"array\",\"items\":\"TurbineState\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<DigitalTwin> ENCODER =
      new BinaryMessageEncoder<DigitalTwin>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<DigitalTwin> DECODER =
      new BinaryMessageDecoder<DigitalTwin>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<DigitalTwin> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<DigitalTwin> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<DigitalTwin> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<DigitalTwin>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this DigitalTwin to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a DigitalTwin from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a DigitalTwin instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static DigitalTwin fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.util.List<tech.nermindedovic.papitutorial.models.avro.TurbineState> reported;
  private java.util.List<tech.nermindedovic.papitutorial.models.avro.TurbineState> desired;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DigitalTwin() {}

  /**
   * All-args constructor.
   * @param reported The new value for reported
   * @param desired The new value for desired
   */
  public DigitalTwin(java.util.List<tech.nermindedovic.papitutorial.models.avro.TurbineState> reported, java.util.List<tech.nermindedovic.papitutorial.models.avro.TurbineState> desired) {
    this.reported = reported;
    this.desired = desired;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return reported;
    case 1: return desired;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: reported = (java.util.List<tech.nermindedovic.papitutorial.models.avro.TurbineState>)value$; break;
    case 1: desired = (java.util.List<tech.nermindedovic.papitutorial.models.avro.TurbineState>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'reported' field.
   * @return The value of the 'reported' field.
   */
  public java.util.List<tech.nermindedovic.papitutorial.models.avro.TurbineState> getReported() {
    return reported;
  }


  /**
   * Sets the value of the 'reported' field.
   * @param value the value to set.
   */
  public void setReported(java.util.List<tech.nermindedovic.papitutorial.models.avro.TurbineState> value) {
    this.reported = value;
  }

  /**
   * Gets the value of the 'desired' field.
   * @return The value of the 'desired' field.
   */
  public java.util.List<tech.nermindedovic.papitutorial.models.avro.TurbineState> getDesired() {
    return desired;
  }


  /**
   * Sets the value of the 'desired' field.
   * @param value the value to set.
   */
  public void setDesired(java.util.List<tech.nermindedovic.papitutorial.models.avro.TurbineState> value) {
    this.desired = value;
  }

  /**
   * Creates a new DigitalTwin RecordBuilder.
   * @return A new DigitalTwin RecordBuilder
   */
  public static tech.nermindedovic.papitutorial.models.avro.DigitalTwin.Builder newBuilder() {
    return new tech.nermindedovic.papitutorial.models.avro.DigitalTwin.Builder();
  }

  /**
   * Creates a new DigitalTwin RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DigitalTwin RecordBuilder
   */
  public static tech.nermindedovic.papitutorial.models.avro.DigitalTwin.Builder newBuilder(tech.nermindedovic.papitutorial.models.avro.DigitalTwin.Builder other) {
    if (other == null) {
      return new tech.nermindedovic.papitutorial.models.avro.DigitalTwin.Builder();
    } else {
      return new tech.nermindedovic.papitutorial.models.avro.DigitalTwin.Builder(other);
    }
  }

  /**
   * Creates a new DigitalTwin RecordBuilder by copying an existing DigitalTwin instance.
   * @param other The existing instance to copy.
   * @return A new DigitalTwin RecordBuilder
   */
  public static tech.nermindedovic.papitutorial.models.avro.DigitalTwin.Builder newBuilder(tech.nermindedovic.papitutorial.models.avro.DigitalTwin other) {
    if (other == null) {
      return new tech.nermindedovic.papitutorial.models.avro.DigitalTwin.Builder();
    } else {
      return new tech.nermindedovic.papitutorial.models.avro.DigitalTwin.Builder(other);
    }
  }

  /**
   * RecordBuilder for DigitalTwin instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DigitalTwin>
    implements org.apache.avro.data.RecordBuilder<DigitalTwin> {

    private java.util.List<tech.nermindedovic.papitutorial.models.avro.TurbineState> reported;
    private java.util.List<tech.nermindedovic.papitutorial.models.avro.TurbineState> desired;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(tech.nermindedovic.papitutorial.models.avro.DigitalTwin.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.reported)) {
        this.reported = data().deepCopy(fields()[0].schema(), other.reported);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.desired)) {
        this.desired = data().deepCopy(fields()[1].schema(), other.desired);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
    }

    /**
     * Creates a Builder by copying an existing DigitalTwin instance
     * @param other The existing instance to copy.
     */
    private Builder(tech.nermindedovic.papitutorial.models.avro.DigitalTwin other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.reported)) {
        this.reported = data().deepCopy(fields()[0].schema(), other.reported);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.desired)) {
        this.desired = data().deepCopy(fields()[1].schema(), other.desired);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'reported' field.
      * @return The value.
      */
    public java.util.List<tech.nermindedovic.papitutorial.models.avro.TurbineState> getReported() {
      return reported;
    }


    /**
      * Sets the value of the 'reported' field.
      * @param value The value of 'reported'.
      * @return This builder.
      */
    public tech.nermindedovic.papitutorial.models.avro.DigitalTwin.Builder setReported(java.util.List<tech.nermindedovic.papitutorial.models.avro.TurbineState> value) {
      validate(fields()[0], value);
      this.reported = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'reported' field has been set.
      * @return True if the 'reported' field has been set, false otherwise.
      */
    public boolean hasReported() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'reported' field.
      * @return This builder.
      */
    public tech.nermindedovic.papitutorial.models.avro.DigitalTwin.Builder clearReported() {
      reported = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'desired' field.
      * @return The value.
      */
    public java.util.List<tech.nermindedovic.papitutorial.models.avro.TurbineState> getDesired() {
      return desired;
    }


    /**
      * Sets the value of the 'desired' field.
      * @param value The value of 'desired'.
      * @return This builder.
      */
    public tech.nermindedovic.papitutorial.models.avro.DigitalTwin.Builder setDesired(java.util.List<tech.nermindedovic.papitutorial.models.avro.TurbineState> value) {
      validate(fields()[1], value);
      this.desired = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'desired' field has been set.
      * @return True if the 'desired' field has been set, false otherwise.
      */
    public boolean hasDesired() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'desired' field.
      * @return This builder.
      */
    public tech.nermindedovic.papitutorial.models.avro.DigitalTwin.Builder clearDesired() {
      desired = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public DigitalTwin build() {
      try {
        DigitalTwin record = new DigitalTwin();
        record.reported = fieldSetFlags()[0] ? this.reported : (java.util.List<tech.nermindedovic.papitutorial.models.avro.TurbineState>) defaultValue(fields()[0]);
        record.desired = fieldSetFlags()[1] ? this.desired : (java.util.List<tech.nermindedovic.papitutorial.models.avro.TurbineState>) defaultValue(fields()[1]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<DigitalTwin>
    WRITER$ = (org.apache.avro.io.DatumWriter<DigitalTwin>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<DigitalTwin>
    READER$ = (org.apache.avro.io.DatumReader<DigitalTwin>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










